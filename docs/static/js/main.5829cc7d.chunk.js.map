{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","htmlFor","className","id","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","toUpperCase","role","GifExpertApp","defaultCategories","name","content","rel","href","ReactDOM","render","document","getElementById"],"mappings":"oMAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAKlB,UAII,uBAAOO,QAAQ,MAAMC,UAAU,aAA/B,kCACA,uBACIC,GAAG,MACHD,UAAU,eACVE,KAAK,OACLC,YAAY,sBACZC,MAAQb,EACRc,SAxBc,SAACX,GACvBF,EAAcE,EAAEY,OAAOF,c,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACH,mCACF,GACRC,EAHa,uDACH,mCADG,cAGyDC,UAAUH,GAHnE,kBAEL,IAFK,SAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MAAK,CAC1BjB,GAAIiB,EAAIjB,GACRkB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QAVlB,kBAaZM,GAbY,4CAAH,sDCmBLM,EAhBK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC1B,OACI,sBAAKV,UAAU,yCAAf,UACI,qBAAKA,UAAU,eAAeuB,IAAMb,EAAMc,IAAML,IAChD,qBAAKnB,UAAU,yBAAf,SACMmB,QC4BHM,EA/BC,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAM,GACNW,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WAENtB,EAASC,GAAWsB,MAAK,SAACV,GACvBQ,EAAS,CACJb,KAAMK,EACNM,SAAS,SAIlB,CAAClB,IAEGmB,EDd2BI,CAAcvB,GAAlCY,EAFgB,EAEtBL,KAAcW,EAFQ,EAERA,QAEtB,OACI,0BAAS1B,UAAU,YAAnB,UACI,oBAAIA,UAAU,8CAAd,SAA8DQ,EAASwB,gBACrEN,GACE,qBAAK1B,UAAU,+DAA+DiC,KAAK,SAAnF,SACI,sBAAMjC,UAAU,UAAhB,2BAIR,qBAAKA,UAAU,oBAAf,SAEQoB,EAAOH,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADCA,EAAIjB,aEgBvBiC,EAhCM,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAEb7C,mBAAS6C,GAFI,mBAE1CrC,EAF0C,KAE9BT,EAF8B,KAIjD,OACI,eAAC,IAAD,WACI,cAAC,IAAD,6BACA,cAAC,IAAD,CAAM+C,KAAK,cAAcC,QAAQ,+FACjC,cAAC,IAAD,CAAMD,KAAK,SAASC,QAAQ,qBAC5B,cAAC,IAAD,CAAMC,IAAI,OAAOC,KAAK,mKAEtB,sBAAMvC,UAAU,sBAAhB,SACI,sBAAKA,UAAU,wBAAf,UACI,oBAAIA,UAAU,YAAd,4BACA,mBAAGA,UAAU,OAAb,wGACA,oBAAIA,UAAU,kBACd,cAAC,EAAD,CAAaX,cAAgBA,SAKjCS,EAAWmB,KAAI,SAAAT,GACX,OACI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,UCvBvCgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5829cc7d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n\r\n            {/* <p> { inputValue } </p> */}\r\n\r\n            <label htmlFor=\"GIF\" className=\"form-label\">¬°Empieza aqu√≠!</label>\r\n            <input\r\n                id=\"GIF\"\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"B√∫squeda de GIFs\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async ( category ) => {\r\n    const api_key = 'rCun9WJciE0EClufBg6sI5RZjrQIpabO', \r\n          limit = 10;      \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${ api_key }&q=${ encodeURI(category) }&limit=${ limit }`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url\r\n    }));\r\n    \r\n    return gifs;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img className=\"card-img-top\" src={ url } alt={ title } />\r\n            <div className=\"card-footer text-muted\">\r\n                { title }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <section className=\"container\">\r\n            <h2 className=\"animate__animated animate__fadeIn lead mb-4\">{ category.toUpperCase() }</h2>\r\n            { loading && (\r\n                <div className=\"spinner-grow text-secondary animate__animated animate__flash\" role=\"status\">\r\n                    <span className=\"sr-only\">Cargando...</span>\r\n                </div>)\r\n            }\r\n\r\n            <div className=\"card-columns mb-5\">\r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem \r\n                            key={ img.id } \r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category ).then((images) => {\r\n           setState({\r\n                data: images,\r\n                loading: false\r\n            });\r\n        });\r\n\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n};","import React, { useState } from 'react';\r\nimport { HeadProvider, Title, Link, Meta } from 'react-head';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = ({ defaultCategories = [] }) => {\r\n\r\n    const [categories, setCategories] = useState(defaultCategories);\r\n\r\n    return (\r\n        <HeadProvider>\r\n            <Title>GIF Expert App</Title>\r\n            <Meta name=\"description\" content=\"Una peque√±a aplicaci√≥n hecha en React con Hooks para buscar y mostrar GIFs animados.\" />\r\n            <Meta name=\"author\" content=\"Jose Covarrubias\" />\r\n            <Link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üñºÔ∏è</text></svg>\" />\r\n\r\n            <main className=\"jumbotron rounded-0\">\r\n                <div className=\"container text-center\">\r\n                    <h1 className=\"display-4\">GIF Expert App</h1>\r\n                    <p className=\"lead\">Una peque√±a aplicaci√≥n hecha en React con Hooks para buscar y mostrar GIFs animados.</p>\r\n                    <hr className=\"my-4 bg-white\" />\r\n                    <AddCategory setCategories={ setCategories } />\r\n                </div>\r\n            </main>\r\n\r\n            {\r\n                categories.map(category => {\r\n                    return (\r\n                        <GifGrid key={ category } category={ category } />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </HeadProvider>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}